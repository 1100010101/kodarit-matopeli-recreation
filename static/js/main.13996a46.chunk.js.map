{"version":3,"sources":["utils.js","SnakeBoard.js","Points.js","LeaderBoard.js","App.js","index.js"],"names":["range","number","Array","Math","round","keys","SnakeBoard","points","setPoints","useState","parseInt","localStorage","getItem","height","setHeight","width","setWidth","getInitialRows","initialRows","i","j","getObstacles","name","location","map","y","x","ceil","randomObstacle","floor","random","length","randomPosition","position","obstacle","some","setObstacle","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","intervalId","setIntervalId","isGameOver","setisGameOver","startGame","setStartGame","error","setError","useEffect","document","addEventListener","e","keyCode","displayRows","row","className","tile","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","newSnake","push","head","hitSnake","slice","find","b","hitWall","checkGameOver","pointsList","JSON","parse","prompt","setItem","stringify","window","dispatchEvent","Event","forEach","madonPaa","pop","newRows","displaySnake","placeholder","type","onChange","size","target","value","console","log","onClick","Points","getSnakePoints","LeaderBoard","setPointsList","sortedPointsList","sort","a","App","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.13996a46.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\r\n/*\r\nJaetaan tämä pätkä oppilaille pastebiniin https://pastebin.com/\r\nThanks Dan Abramov for useInterval hook\r\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nThis useInterval Hook sets up an interval and clears it after unmounting.\r\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\r\n*/\r\nexport const useInterval = (callback, delay, setIntervalId) => {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      setIntervalId(id);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay, setIntervalId]);\r\n};\r\n\r\nexport const range = number => [...Array(Math.round(number)).keys()];\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {useInterval, range} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const [height, setHeight] = useState(parseInt(localStorage.getItem('snake-board-size')) || 10)\r\n  const [width, setWidth] = useState(parseInt(localStorage.getItem('snake-board-size') || 10))\r\n  const getInitialRows = () => {\r\n    var initialRows = [];\r\n    for (var i = 0; i < height; i++) {\r\n      initialRows[i] = [];\r\n      for (var j = 0; j < width; j++) {\r\n        initialRows[i][j] = \"blank\";\r\n    }\r\n  }\r\n  return initialRows;\r\n}\r\n  const getObstacles = () => [\r\n    {name: \"tyhjä\", location: []},\r\n    {\r\n      name: \"keski\",\r\n      location: range(width * 0.6).map(y => ({\r\n        x: Math.round(height / 2),\r\n        y: y + Math.ceil(width * 0.2)\r\n      }))\r\n    },\r\n    {\r\n      name: \"reunat\",\r\n      location: [\r\n        ...range(width).map(x => ({x, y: 0})),\r\n        ...range(width).map(x => ({x, y: height - 1})),\r\n        ...range(height).map(y => ({x: 0, y})),\r\n        ...range(height).map(y => ({x: height - 1, y}))\r\n      ]\r\n    },\r\n    {\r\n      name: \"oma\",\r\n      location: [\r\n        ...range(width).map(x => ({x, y: 0})),\r\n        ...range(width).map(x => ({x, y: height - 2})),\r\n        ...range(width).map(x => ({x, y: height - 1})),\r\n        ...range(height).map(y => ({x: 0, y})),\r\n        ...range(height).map(y => ({x: 1, y})),\r\n        ...range(width).map(x => ({x, y: 1})),\r\n        ...range(height).map(y => ({x: height - 2, y})),\r\n        ...range(height).map(y => ({x: height - 1, y}))\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const randomObstacle = () =>\r\n    getObstacles()[Math.floor(Math.random() * getObstacles().length)];\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    if (\r\n      obstacle.location.some(({x, y}) => position.x === x && position.y === y)\r\n    ) {\r\n      return randomPosition();\r\n    }\r\n    return position;\r\n  };\r\n\r\n  const [obstacle, setObstacle] = useState(randomObstacle());\r\n  const [rows, setRows] = useState(getInitialRows);\r\n  const [snake, setSnake] = useState([\r\n    {\r\n      x: 2,\r\n      y: 2\r\n    }\r\n  ]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition);\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setisGameOver] = useState(false);\r\n  const [startGame, setStartGame] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  useEffect(\r\n    () => {\r\n    if (width >= 10 && width <= 100 && height >= 10 && height <= 100) {\r\n      setObstacle(randomObstacle())\r\n      setRows(getInitialRows())\r\n      setFood(randomPosition())\r\n    }\r\n  }, [width, height])\r\n\r\n  const changeDirectionWithKeys = e => {\r\n    const {keyCode} = e;\r\n    switch (keyCode) {\r\n      case 37:\r\n        setDirection(\"left\");\r\n        break;\r\n      case 38:\r\n        setDirection(\"top\");\r\n        break;\r\n      case 39:\r\n        setDirection(\"right\");\r\n        break;\r\n      case 40:\r\n        setDirection(\"bottom\");\r\n        break;\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key={i}>\r\n      {\" \"}\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={`${i}-${j}`} />\r\n      ))}{\" \"}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = getInitialRows();\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    obstacle.location.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"obstacle\";\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    const head = snake[0];\r\n    const body = snake.slice(1, -1);\r\n    const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\r\n    const hitWall = obstacle.location.some(\r\n      ({x, y}) => head.x === x && head.y === y\r\n    );\r\n    return hitSnake || hitWall;\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    if (!startGame) return;\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({\r\n          x: snake[0].x,\r\n          y: (snake[0].y + 1) % width\r\n        });\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({\r\n          x: snake[0].x,\r\n          y: (snake[0].y - 1 + width) % width\r\n        });\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({\r\n          x: (snake[0].x - 1 + height) % height,\r\n          y: snake[0].y\r\n        });\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({\r\n          x: (snake[0].x + 1) % height,\r\n          y: snake[0].y\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setisGameOver(true);\r\n      clearInterval(intervalId);\r\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n      const name = prompt(\"Peli päättyi! Anna nimimerkkisi:\");\r\n      pointsList.push({name, points});\r\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n      window.dispatchEvent(new Event(\"storage\"));\r\n    }\r\n    // Lisätään madolle jaka askeleella uusi pala\r\n    //joka poistetaan jos amto ei saa tällä askeleella ruokaa\r\n    snake.forEach(tile => {\r\n      newSnake.push(tile);\r\n    });\r\n    //Tarkistetaan saako mato ruuan kiinni\r\n    const madonPaa = snake[0];\r\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n      setFood(randomPosition);\r\n      setPoints(points + 1);\r\n    } else {\r\n      newSnake.pop();\r\n    }\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 200, setIntervalId);\r\n  return (\r\n    <div className=\"Snake-board\">\r\n      {!startGame && (\r\n        <>\r\n        <div>Pelilaudan koko on nyt {width} ruutua.</div>\r\n        <div>Aseta halutessasi uusi pelilaudan koko:</div>\r\n        <input\r\n        className=\"Board-size\"\r\n        placeholder=\"Koko 10-100\"\r\n        type=\"number\"\r\n        onChange={\r\n          (e) => {\r\n            const size = parseInt(e.target.value)\r\n            if (size <= 100 && size >= 10) {\r\n              console.log(\"OK\", size);\r\n              setWidth(size)\r\n              setHeight(size)\r\n              localStorage.setItem(\"snake-board-size\", size);\r\n              setError(null)\r\n            } else {\r\n              console.error(\"Kokeile jotain toista lukua\", size);\r\n              setError(\r\n                `Pelilaudan koko on liian ${size > 100 ? \"suuri\" : \"pieni\"}`\r\n              )\r\n            }\r\n          }\r\n        }\r\n        />\r\n        {error && <div className=\"Error\">{error}</div>}\r\n        <button className=\"Start-game\" onClick={setStartGame}>Aloita peli\r\n        </button>\r\n        </>\r\n      )}\r\n      {\" \"}\r\n      {startGame && displayRows}\r\n      {isGameOver && <div className=\"Game-over\"> Game over! </div>}{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","import React from 'react'\r\nimport \"./Points.css\";\r\n\r\nconst Points = ({\r\n    points\r\n  }) => {\r\n    return ( < div className = \"Points\" > {\r\n        points\r\n      }\r\n      pistettä < /div>)\r\n\r\n\r\n\r\n    };\r\n\r\n    export default Points;","import React, {useState} from \"react\";\r\nimport \"./LeaderBoard.css\";\r\nconst getSnakePoints = () =>\r\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n\r\nconst LeaderBoard = () => {\r\n  const [pointsList, setPointsList] = useState(getSnakePoints());\r\n\r\n  window.addEventListener(\"storage\", () => {\r\n    setPointsList(getSnakePoints());\r\n  });\r\n\r\n  const sortedPointsList = pointsList.sort((a, b) => b.points - a.points);\r\n\r\n  return (\r\n    <div className=\"LeaderBoard\">\r\n      <div className=\"LeaderBoard-header\"> Top 5 </div>\r\n      <div className=\"LeaderBoard-points\">\r\n        {sortedPointsList.slice(0, 5).map((points, i) => (\r\n          <div key={`${points.points}-${i}`}>\r\n            {points.name}\r\n            {points.points}{\" \"}\r\n          </div>\r\n        ))}\r\n        pisteet\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderBoard;\r\n","import React, {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport SnakeBoard from \"./SnakeBoard\";\r\nimport Points from \"./Points\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\n\r\nconst App = () => {\r\n  const [points, setPoints] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"> Matopeli </header>{\" \"}\r\n      <Points points={points} />{\" \"}\r\n      <SnakeBoard points={points} setPoints={setPoints} />{\" \"}\r\n      <button onClick={() => window.location.reload()}> Uusi peli </button>\r\n      <LeaderBoard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}