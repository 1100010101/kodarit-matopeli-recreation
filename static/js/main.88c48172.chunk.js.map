{"version":3,"sources":["SnakeBoard.js","utils.js","Points.js","LeaderBoard.js","App.js","index.js"],"names":["SnakeBoard","points","setPoints","initialRows","i","j","randomPosition","x","Math","floor","random","y","useState","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","intervalId","setIntervalId","isGameOver","setisGameOver","document","addEventListener","e","keyCode","displayRows","map","row","className","tile","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newSnake","push","head","slice","find","b","checkGameOver","pointsList","JSON","parse","localStorage","getItem","setItem","stringify","window","dispatchEvent","Event","forEach","madonPaa","pop","newRows","displaySnake","Points","getSnakePoints","LeaderBoard","setPointsList","sort","a","App","onClick","location","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.88c48172.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useInterval} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const height = 10;\r\n  const width = 10;\r\n  var initialRows = [];\r\n  for (var i = 0; i < height; i++) {\r\n    initialRows[i] = [];\r\n    for (var j = 0; j < width; j++) {\r\n      initialRows[i][j] = \"blank\";\r\n    }\r\n  }\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    return position;\r\n  };\r\n  const [rows, setRows] = useState(initialRows);\r\n  const [snake, setSnake] = useState([\r\n    {\r\n      x: 0,\r\n      y: 0\r\n    }\r\n  ]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition);\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setisGameOver] = useState(false);\r\n\r\n  const changeDirectionWithKeys = e => {\r\n    const {keyCode} = e;\r\n    switch (keyCode) {\r\n      case 37:\r\n        setDirection(\"left\");\r\n        break;\r\n      case 38:\r\n        setDirection(\"top\");\r\n        break;\r\n      case 39:\r\n        setDirection(\"right\");\r\n        break;\r\n      case 40:\r\n        setDirection(\"bottom\");\r\n        break;\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key={i}>\r\n      {\" \"}\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={`${i}-${j}`} />\r\n      ))}{\" \"}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = initialRows;\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    setRows(newRows);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    const head = snake[0];\r\n    const body = snake.slice(1, -1);\r\n    return body.find(b => b.x === head.x && b.y === head.y);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({\r\n          x: snake[0].x,\r\n          y: (snake[0].y + 1) % width\r\n        });\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({\r\n          x: snake[0].x,\r\n          y: (snake[0].y - 1 + width) % width\r\n        });\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({\r\n          x: (snake[0].x - 1 + height) % height,\r\n          y: snake[0].y\r\n        });\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({\r\n          x: (snake[0].x + 1) % height,\r\n          y: snake[0].y\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setisGameOver(true);\r\n      clearInterval(intervalId);\r\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n      pointsList.push(points);\r\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n      window.dispatchEvent(new Event(\"storage\"));\r\n    }\r\n    // Lisätään madolle jaka askeleella uusi pala\r\n    //joka poistetaan jos amto ei saa tällä askeleella ruokaa\r\n    snake.forEach(tile => {\r\n      newSnake.push(tile);\r\n    });\r\n    //Tarkistetaan saako mato ruuan kiinni\r\n    const madonPaa = snake[0];\r\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n      setFood(randomPosition);\r\n      setPoints(points + 1);\r\n    } else {\r\n      newSnake.pop();\r\n    }\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 200, setIntervalId);\r\n  return (\r\n    <div className=\"Snake-board\">\r\n      {\" \"}\r\n      {displayRows}\r\n      {isGameOver && <div className=\"Game-over\"> Game over! </div>}{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","import {\r\n  useEffect,\r\n  useRef\r\n} from 'react'\r\n/*\r\nJaetaan tämä pätkä oppilaille pastebiniin https://pastebin.com/\r\nThanks Dan Abramov for useInterval hook\r\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nThis useInterval Hook sets up an interval and clears it after unmounting.\r\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\r\n*/\r\nexport const useInterval = (callback, delay, setIntervalId) => {\r\n  const savedCallback = useRef()\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current()\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      setIntervalId(id);\r\n      return () => clearInterval(id)\r\n    }\r\n  }, [delay, setIntervalId])\r\n}","import React from 'react'\r\nimport \"./Points.css\";\r\n\r\nconst Points = ({\r\n    points\r\n  }) => {\r\n    return ( < div className = \"Points\" > {\r\n        points\r\n      }\r\n      pistettä < /div>)\r\n\r\n\r\n\r\n    };\r\n\r\n    export default Points;","import React, {useState} from \"react\";\r\nimport \"./LeaderBoard.css\";\r\nconst getSnakePoints = () =>\r\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n\r\nconst LeaderBoard = () => {\r\n  const [pointsList, setPointsList] = useState(getSnakePoints());\r\n\r\n  window.addEventListener(\"storage\", () => {\r\n    setPointsList(getSnakePoints());\r\n  });\r\n\r\n  const sortedPointsList = pointsList.sort((a, b) => b - a);\r\n\r\n  return (\r\n    <div className=\"LeaderBoard\">\r\n      <div className=\"LeaderBoard-header\"> Top 5 </div>\r\n      <div className=\"LeaderBoard-points\">\r\n        {pointsList.slice(0, 5).map((points, i) => (\r\n          <div key={`${points}-${i}`}>{points} pistettä</div>\r\n        ))}\r\n        pisteet\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderBoard;\r\n","import React, {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport SnakeBoard from \"./SnakeBoard\";\r\nimport Points from \"./Points\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\n\r\nconst App = () => {\r\n  const [points, setPoints] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"> Matopeli </header>{\" \"}\r\n      <Points points={points} />{\" \"}\r\n      <SnakeBoard points={points} setPoints={setPoints} />{\" \"}\r\n      <button onClick={() => window.location.reload()}> Uusi peli </button>\r\n      <LeaderBoard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}