[{"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\index.js":"1","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\App.js":"2","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\SnakeBoard.js":"3","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\utils.js":"4","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\points.js":"5","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\Points.js":"6","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\Leaderboard.js":"7","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\LeaderBoard.js":"8"},{"size":432,"mtime":1612279552684,"results":"9","hashOfConfig":"10"},{"size":593,"mtime":1618324757965,"results":"11","hashOfConfig":"10"},{"size":6999,"mtime":1621350193746,"results":"12","hashOfConfig":"10"},{"size":965,"mtime":1619534845042,"results":"13","hashOfConfig":"10"},{"size":209,"mtime":1617117556138,"results":"14","hashOfConfig":"15"},{"size":233,"mtime":1617720335425,"results":"16","hashOfConfig":"10"},{"size":245,"mtime":1618324650806,"results":"17","hashOfConfig":"15"},{"size":860,"mtime":1618931709391,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"zo04l0",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"14ssg39",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"34","messages":"35","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\index.js",[],["38","39"],"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\App.js",[],"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\SnakeBoard.js",["40","41"],"import React, {useState, useEffect} from \"react\";\r\nimport {useInterval, range} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const [height, setHeight] = useState(parseInt(localStorage.getItem('snake-board-size')) || 10)\r\n  const [width, setWidth] = useState(parseInt(localStorage.getItem('snake-board-size') || 10))\r\n  const getInitialRows = () => {\r\n    var initialRows = [];\r\n    for (var i = 0; i < height; i++) {\r\n      initialRows[i] = [];\r\n      for (var j = 0; j < width; j++) {\r\n        initialRows[i][j] = \"blank\";\r\n    }\r\n  }\r\n  return initialRows;\r\n}\r\n  const getObstacles = () => [\r\n    {name: \"tyhjä\", location: []},\r\n    {\r\n      name: \"keski\",\r\n      location: range(width * 0.6).map(y => ({\r\n        x: Math.round(height / 2),\r\n        y: y + Math.ceil(width * 0.2)\r\n      }))\r\n    },\r\n    {\r\n      name: \"reunat\",\r\n      location: [\r\n        ...range(width).map(x => ({x, y: 0})),\r\n        ...range(width).map(x => ({x, y: height - 1})),\r\n        ...range(height).map(y => ({x: 0, y})),\r\n        ...range(height).map(y => ({x: height - 1, y}))\r\n      ]\r\n    },\r\n    {\r\n      name: \"oma\",\r\n      location: [\r\n        ...range(width).map(x => ({x, y: 0})),\r\n        ...range(width).map(x => ({x, y: height - 2})),\r\n        ...range(width).map(x => ({x, y: height - 1})),\r\n        ...range(height).map(y => ({x: 0, y})),\r\n        ...range(height).map(y => ({x: 1, y})),\r\n        ...range(width).map(x => ({x, y: 1})),\r\n        ...range(height).map(y => ({x: height - 2, y})),\r\n        ...range(height).map(y => ({x: height - 1, y}))\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const randomObstacle = () =>\r\n    getObstacles()[Math.floor(Math.random() * getObstacles().length)];\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    if (\r\n      obstacle.location.some(({x, y}) => position.x === x && position.y === y)\r\n    ) {\r\n      return randomPosition();\r\n    }\r\n    return position;\r\n  };\r\n\r\n  const [obstacle, setObstacle] = useState(randomObstacle());\r\n  const [rows, setRows] = useState(getInitialRows);\r\n  const [snake, setSnake] = useState([\r\n    {\r\n      x: 2,\r\n      y: 2\r\n    }\r\n  ]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition);\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setisGameOver] = useState(false);\r\n  const [startGame, setStartGame] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  useEffect(\r\n    () => {\r\n    if (width >= 10 && width <= 100 && height >= 10 && height <= 100) {\r\n      setObstacle(randomObstacle())\r\n      setRows(getInitialRows())\r\n      setFood(randomPosition())\r\n    }\r\n  }, [width, height])\r\n\r\n  const changeDirectionWithKeys = e => {\r\n    const {keyCode} = e;\r\n    switch (keyCode) {\r\n      case 37:\r\n        setDirection(\"left\");\r\n        break;\r\n      case 38:\r\n        setDirection(\"top\");\r\n        break;\r\n      case 39:\r\n        setDirection(\"right\");\r\n        break;\r\n      case 40:\r\n        setDirection(\"bottom\");\r\n        break;\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key={i}>\r\n      {\" \"}\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={`${i}-${j}`} />\r\n      ))}{\" \"}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = getInitialRows();\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    obstacle.location.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"obstacle\";\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    const head = snake[0];\r\n    const body = snake.slice(1, -1);\r\n    const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\r\n    const hitWall = obstacle.location.some(\r\n      ({x, y}) => head.x === x && head.y === y\r\n    );\r\n    return hitSnake || hitWall;\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    if (!startGame) return;\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({\r\n          x: snake[0].x,\r\n          y: (snake[0].y + 1) % width\r\n        });\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({\r\n          x: snake[0].x,\r\n          y: (snake[0].y - 1 + width) % width\r\n        });\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({\r\n          x: (snake[0].x - 1 + height) % height,\r\n          y: snake[0].y\r\n        });\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({\r\n          x: (snake[0].x + 1) % height,\r\n          y: snake[0].y\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setisGameOver(true);\r\n      clearInterval(intervalId);\r\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n      const name = prompt(\"Peli päättyi! Anna nimimerkkisi:\");\r\n      pointsList.push({name, points});\r\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n      window.dispatchEvent(new Event(\"storage\"));\r\n    }\r\n    // Lisätään madolle jaka askeleella uusi pala\r\n    //joka poistetaan jos amto ei saa tällä askeleella ruokaa\r\n    snake.forEach(tile => {\r\n      newSnake.push(tile);\r\n    });\r\n    //Tarkistetaan saako mato ruuan kiinni\r\n    const madonPaa = snake[0];\r\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n      setFood(randomPosition);\r\n      setPoints(points + 1);\r\n    } else {\r\n      newSnake.pop();\r\n    }\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 200, setIntervalId);\r\n  return (\r\n    <div className=\"Snake-board\">\r\n      {!startGame && (\r\n        <>\r\n        <div>Pelilaudan koko on nyt {width} ruutua.</div>\r\n        <div>Aseta halutessasi uusi pelilaudan koko:</div>\r\n        <input\r\n        className=\"Board-size\"\r\n        placeholder=\"Koko 10-100\"\r\n        type=\"number\"\r\n        onChange={\r\n          (e) => {\r\n            const size = parseInt(e.target.value)\r\n            if (size <= 100 && size >= 10) {\r\n              console.log(\"OK\", size);\r\n              setWidth(size)\r\n              setHeight(size)\r\n              localStorage.setItem(\"snake-board-size\", size);\r\n              setError(null)\r\n            } else {\r\n              console.error(\"Kokeile jotain toista lukua\", size);\r\n              setError(\r\n                `Pelilaudan koko on liian ${size > 100 ? \"suuri\" : \"pieni\"}`\r\n              )\r\n            }\r\n          }\r\n        }\r\n        />\r\n        {error && <div className=\"Error\">{error}</div>}\r\n        <button className=\"Start-game\" onClick={setStartGame}>Aloita peli\r\n        </button>\r\n        </>\r\n      )}\r\n      {\" \"}\r\n      {startGame && displayRows}\r\n      {isGameOver && <div className=\"Game-over\"> Game over! </div>}{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\utils.js",[],"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\points.js",[],["42","43"],"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\Points.js",[],"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\Leaderboard.js",["44"],"C:\\Users\\oma\\Documents\\kodarit-Noel\\matopeli-recreated\\src\\LeaderBoard.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":89,"column":6,"nodeType":"51","endLine":89,"endColumn":21,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":93,"column":5,"nodeType":"55","messageId":"56","endLine":106,"endColumn":6},{"ruleId":"45","replacedBy":"57"},{"ruleId":"47","replacedBy":"58"},{"ruleId":null,"fatal":true,"severity":2,"message":"59","line":1,"column":23},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getInitialRows', 'randomObstacle', and 'randomPosition'. Either include them or remove the dependency array.","ArrayExpression",["62"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["60"],["61"],"Parsing error: Unexpected token\n\n> 1 | const leaderBoard = ( => {\n    |                       ^\n  2 |     return <div className = \"LeaderBoard\" >\n  3 |       <\n  4 |       div className = \"LeaderBoard-header\" > Top 5 < /div> <","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [width, height, randomObstacle, getInitialRows, randomPosition]",{"range":"65","text":"66"},[2784,2799],"[width, height, randomObstacle, getInitialRows, randomPosition]"]